# 1- Задайте список из нескольких чисел. Напишите программу, которая найдёт сумму элементов списка, стоящих на нечётной позиции.
# Пример:
# [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12

def calc():
    """
    Метод расчета суммы элементов списка, стоящих на нечётной позиции
    """
    result = []
    sum = 0
    for i in input('Введите числа через пробел -> ').split():
        result.append(i)
    for i in range(len(result)):
        if int(i) % 2 == 1:
            sum+=int(result[i])
            # print(result[i]) # проверка суммируемых элементов
    print('Получили список -> ',result)
    print('Сумма элементов списка, стоящих на нечётной позиции -> ',sum)
    user_another_try()


def user_another_try():
    """
    Метод для возможности не закрывая программу воспользоваться ею еще раз
    """
    user_choice = input('Вы хотите продолжить работу с программой? Да - Y, Нет - N - > ')
    while user_choice.lower() != 'y' and user_choice.lower() != 'n' and user_choice.lower() != 'x': # В прошлый раз в комментарии к ДЗ спросили, почему я сделал именно так, а не просто Y и остальные символы. Ответ: Потому что я помню раньше в DOS у программ такие запросы были и мне просто понравилось делать отссылку:) Плюс еще - а вдруг пользователь ошибочно промахнется и не попадет по кнопке Y и выйдет. Ее придется снова запускать... А так его программа спросит, точно хочешь выйти или нет:)
        user_choice = input('Пожалуйста, введите верное решение. Если хотите продолжить работу - введите Y, если желаете закрыть программу - введите N или X -> ')
    if user_choice.lower() == 'y':
        calc()
    else:
        print('Bye!')

print('Приветствую! Эта программа найдёт сумму элементов списка, стоящих на нечётной позиции.')
calc()